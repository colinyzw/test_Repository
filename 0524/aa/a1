#include<iostream>
#include<Winsock2.h>
using  namespace std;

// Need to link with Ws2_32.lib
#pragma comment(lib, "ws2_32.lib")



int  main()
{
	//1.选个项目-加载库   wsa-windows socket api
	WORD wVersionRequested={0};
	WSADATA wsaData={0};
    int result=0;

	/* Use the MAKEWORD(lowbyte, highbyte) macro declared in Windef.h */
    wVersionRequested = MAKEWORD(2,2);

    result = WSAStartup(wVersionRequested, &wsaData);
    if (result != 0) {
        /* Tell the user that we could not find a usable */
        /* Winsock DLL.                                  */
        printf("WSAStartup failed with error: %d\n", result);
        return 1;
    }

	/* Confirm that the WinSock DLL supports 2.2.*/
	/* Note that if the DLL supports versions greater    */
	/* than 2.2 in addition to 2.2, it will still return */
	/* 2.2 in wVersion since that is the version we      */
	/* requested.                                        */

    if (LOBYTE(wsaData.wVersion) != 2 || HIBYTE(wsaData.wVersion) != 2) {
        /* Tell the user that we could not find a usable */
        /* WinSock DLL.                                  */
        printf("Could not find a usable version of Winsock.dll\n");
        WSACleanup();//卸载库
        return 1;
    }
    else
        printf("The Winsock 2.2 dll was found okay\n");
 
	//2.(雇个人)创建套接字
	SOCKET clientSocket = socket(AF_INET,SOCK_DGRAM,IPPROTO_UDP);
    if (clientSocket == INVALID_SOCKET) 
	{
		//WSAGetLastError获取具体的错误码
		printf("socket function failed with error = %d\n", WSAGetLastError());
		WSACleanup();//卸载库
		return 1;
	}
    else 
        printf("socket function succeeded\n");
	
	
	//3.发送消息
	char sendBuf[1024];
	sockaddr_in addrServer;
	addrServer.sin_family = AF_INET;
	addrServer.sin_port = htons(1234);
	//addrServer.sin_addr.S_un.S_addr=inet_addr("10.3.14.216");//
	addrServer.sin_addr.S_un.S_addr=inet_addr("10.3.14.255");//直接广播
	//4.接收消息
	char recvBuf[1024];
	int recvBufLen=1024;
	int recvNum=0;

	while(1)
	{
		gets(sendBuf);
		sendto(clientSocket,sendBuf,sizeof(sendBuf),0,(sockaddr*)&addrServer,sizeof(addrServer));

		recvNum = recvfrom(clientSocket,recvBuf,sizeof(recvBuf),0,0,0);
		if(recvNum > 0)
		{
			cout<<"服务器say:"<<recvBuf<<endl;
		}else
		{
			cout<<"recvfrom failed with error:"<<WSAGetLastError()<<endl;
		}
	
	}

	//5.关闭套接字，卸载库
	result = closesocket(clientSocket);//关闭套接字
	if(result == SOCKET_ERROR)
	{
		printf("closesocket failed with error\n",WSAGetLastError());
		WSACleanup();
		return 1;
	}
	WSACleanup();
        

	system("pause");
	return 0;
}
